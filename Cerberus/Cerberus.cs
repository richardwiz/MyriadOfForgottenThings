using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using ManagedTxnLib;
using NHibernate;
using FluentCerberus;
using FluentCerberus.Connectivity;
using NHibernate.Linq;
using System.Text.RegularExpressions;

namespace Cerberus
{
    public partial class Cerberus : ServiceBase
    {
        private const String EFTIds = "2266197691,2266197951,2266201712,2266204825,2266204895,2266205300,2266208472,2266212352,2266214723,2266215131,2266215201,2266215792,2266215895,2266220271,2266220341,2266221755,2266222836,2266233606,2266234942,2266235703,2266280401,2266280402,2266281415,2266281416,2266282183,2266282184,2266282633,2266282634,2266283398,2266283399,2266283491,2266283492,2266283570,2266283571,2266283814,2266283815,2266292090,2266292091,2266292804,2266292805,2266292932,2266292933,2266298042,2266298043,2266299096,2266299097,2266299852,2266299854,2266299941,2266300397,2266300399,2266300713,2266300715,2266302315,2266302316,2266303058,2266303059,2266308056,2266308057,2266308283,2266308285,2266309938,2266309939,2266310120,2266310121,2266312194,2266312195,2266312252,2266312253,2266312686,2266312687,2266312981,2266312982,2266314091,2266314093,2266314152,2266314153,2266314448,2266314449,2266320909,2266320910,2266321324,2266321325,2266321696,2266321698,2266322014,2266322016,2266322362,2266322363,2266322733,2266322734,2266322914,2266322916,2266323196,2266323376,2266324733,2266324734,2266324837,2266325462,2266325464,2266325941,2266325942,2266326679,2266326683,2266327410,2266327411,2266327809,2266327811,2266327844,2266327845,2266327853,2266327854,2266331721,2266331722,2266332263,2266332264,2266332278,2266332279,2266333508,2266333509,2266333548,2266333654,2266333655,2266333743,2266333746,2266334080,2266334375,2266334477,2266334593,2266334708,2266334710,2266334743,2266335063,2266335400,2266335543,2266335711,2266335735,2266335738,2266335929,2266335930,2266336149,2266336150,2266336503,2266336732,2266336733,2266337056,2266337058,2266337108,2266337110,2266337186,2266337187,2266338725,2266338726,2266338857,2266338858,2266339133,2266339306,2266339919,2266339920,2266339960,2266339963,2266340684,2266340685,2266340693,2266340848,2266340850,2266345414,2266345415,2266345422,2266345424,2266345600,2266345873,2266345875,2266346129,2266346132,2266346300,2266346301,2266346584,2266346585,2266347271,2266347274,2266347422,2266347423,2266347732,2266348079,2266348113,2266348121,2266348203,2266348207,2266348299,2266348301,2266348664,2266348822,2266348823,2266348825,2266349064,2266349066,2266349251,2266349502,2266349504,2266349582,2266349649,2266349651,2266349838,2266350017,2266350020,2266350104,2266350106,2266350122,2266350123,2266350264,2266350904,2266350905,2266350963,2266350964,2266351292,2266351293,2266351538,2266351539,2266351865,2266351866,2266352365,2266352564,2266352565,2266352848,2266352849,2266352881,2266352882,2266353322,2266353323,2266353389,2266353390,2266353554,2266353555,2266353947,2266353948,2266354455,2266354456,2266354487,2266354489,2266354793,2266354794,2266354872,2266354874,2266355005,2266355174,2266355527,2266355528,2266355587,2266355804,2266356043,2266356045,2266356066,2266356068,2266356287,2266356396,2266356397,2266356405,2266356407,2266356485,2266356486,2266356639,2266356735,2266356736,2266356821,2266356822,2266360895,2266360896,2266361056,2266361058,2266361070,2266361072,2266361247,2266361248,2266361250,2266361254,2266361612,2266361613,2266362446,2266362448,2266362638,2266362639,2266362845,2266363253,2266363254,2266363935,2266363936,2266364242,2266364244,2266364699,2266364701,2266365075,2266365078,2266365212,2266365214,2266365217,2266365411,2266365413,2266365498,2266366507,2266367275,2266367417,2266367933,2266368060,2266368320,2266368321,2266368445,2266368498,2266368610,2266368613,2266368695,2266369034,2266369037,2266369357,2266369359,2266370237,2266370242,2266370639,2266371142,2266371147,2266371226,2266371415,2266372710,2266373414,2266373418,2266373804,2266374687,2266374819,2266375286,2266375373,2266375477,2266375482,2266376104,2266376106,2266376362,2266377117,2266377752,2266377965,2266377967,2266378128,2266378196,2266378662,2266378870,2266379081,2266379193,2266379784,2266380448,2266385133,2266385265,2266385940,2266386052,2266386073,2266386357,2266386486,2266386658,2266387394,2266388163,2266388180,2266388863,2266388867,2266389010,2266389118,2266389120,2266389229,2266389314,2266389430,2266390061,2266390085,2266390098,2266390651,2266390672,2266390717,2266391014,2266391130,2266391219,2266391892,2266392948,2266393133,2266393162,2266393372,2266393525,2266393530,2266393835,2266395256,2266395300,2266395370,2266395413,2266395537,2266395598,2266395606,2266395628,2266395671,2266395738,2266395865,2266396132,2266396135,2266396197,2266396200,2266396292,2266396392,2266396548,2266396801,2266399190,2266399202,2266399507,2266400793,2266402124,2266402440,2266402444,2266402546,2266403060,2266403219,2266403221,2266405264,2266405837,2266406188,2266408262,2266408351,2266408354,2266408546,2266408551,2266408607,2266408810,2266408811,2266408813,2266408911,2266408916,2266408963,2266408964,2266409334,2266409336,2266409586,2266409589,2266409917,2266409919,2266410170,2266410448,2266410449,2266410454,2266410497,2266410652,2266410686,2266410820,2266411653,2266411659,2266412433,2266412436,2266412499,2266412505,2266413505,2266413509,2266414007,2266414009,2266414988,2266415033,2266415633,2266415819,2266416579,2266416588,2266416702,2266416707,2266416751,2266416935,2266416938,2266417043,2266417343,2266417347,2266417494,2266417997,2266418001,2266418457,2266418621,2266418740,2266423450,2266423894,2266425160,2266425161,2266425281,2266427220,2266427365,2266428843,2266428848,2266428864,2266429126,2266429329,2266429384,2266429849,2266430085,2266431054,2266431168,2266431171,2266431212,2266431947,2266432051,2266432228,2266432654,2266432832,2266433595,2266435568,2266435757,2266435762,2266436590,2266436922,2266436923,2266437529,2266437758,2266438814,2266438968,2266439054,2266440131,2266440761,2266440797,2266441104,2266441332,2266441604,2266443797,2266443801,2266443908,2266443917,2266444009,2266444329,2266444441,2266444588,2266445191,2266445461,2266445463,2266446411,2266446516,2266446520,2266446958,2266447310,2266448057,2266448316,2266450266,2266450331,2266450332,2266450487,2266450497,2266450978,2266452890,2266452951,2266453876,2266454150,2266454159,2266454167,2266454915,2266455101,2266455699,2266455701,2266456869,2266456873,2266456920,2266456999,2266457000,2266457617,2266458062,2266458064,2266458407,2266458554,2266459723,2266459726,2266460249,2266460650,2266461602,2266461951,2266462443,2266462603,2266462605,2266463451,2266463549,2266464428,2266464465,2266464468,2266464486,2266464492,2266464876,2266464878,2266465023,2266465073,2266465670,2266465760,2266465836,2266470284,2266470542,2266470550,2266471097,2266471388,2266471390,2266471433,2266471834,2266471987,2266471992,2266472275,2266472513,2266472559,2266472645,2266473030,2266473039,2266473339,2266473737,2266473754,2266474898,2266475290,2266475335,2266475343,2266476025,2266476095,2266476096,2266476103,2266476843,2266476850,2266477400,2266477509,2266477614,2266477627,2266478646,2266478860,2266478977,2266479063,2266479309,2266479487,2266479596,2266479734,2266479808,2266480831,2266481279,2266481484,2266482352,2266482535,2266482731,2266483098,2266483398,2266483599,2266483821,2266483897,2266483899,2266484113,2266484301,2266484348,2266484710,2266485104,2266485110,2266485335,2266486345,2266486576,2266486769,2266487275,2266487329,2266490098,2266490892,2266491039,2266491609,2266491933,2266492775,2266493147,2266493157,2266493792,2266494286,2266496051,2266496623,2266496924,2266497300,2266497372,2266497383,2266498183,2266498335,2266498345,2266499223,2266499320,2266499344,2266499491,2266500258,2266500779,2266502259,2266502354,2266502934,2266503094,2266503796,2266503798,2266504282,2266504543,2266504556,2266504561,2266504654,2266505656,2266505660,2266505766,2266506447,2266506472,2266507975,2266507984,2266508341,2266508381,2266508996,2266508998,2266509064,2266509228,2266509728,2266509820,2266509907,2266509908,2266509950,2266510059,2266510575,2266511060,2266511234,2266511831,2266512390,2266512442,2266512524,2266512525,2266512974,2266513039,2266513092,2266513220,2266513304,2266513549,2266514989,2266515328,2266515782,2266515819,2266516030,2266516653,2266516661,2266517145,2266518281,2266518315,2266519177,2266519704,2266520424,2266520849,2266520963,2266523223,2266524085,2266524359,2266525520,2266525541,2266525856,2266526104,2266526352,2266526391,2266526739,2266526771,2266526781,2266526940,2266526948,2266527167,2266527507,2266527527,2266528101,2266528796,2266528983,2266529148,2266529493,2266529661,2266529664,2266529820,2266529969,2266530310,2266530324,2266530671,2266530774,2266531090,2266531509,2266531660,2266531769,2266532069,2266532536,2266532705,2266532892,2266533667,2266533956,2266535589,2266535885,2266536528,2266537099,2266537140,2266537277,2266537875,2266538109,2266539423,2266540168,2266541624,2266542052,2266542423,2266542671,2266542711,2266542981,2266543544,2266544073,2266544170,2266544191,2266544339,2266544686,2266544688,2266545351,2266545483,2266545553,2266545695,2266545700,2266545850,2266546059,2266546474,2266546504,2266549215,2266550196,2266550242,2266550852,2266552802,2266552812,2266553395,2266553407,2266553583,2266553585,2266554016,2266554801,2266555260,2266555267,2266555351,2266555513,2266556077,2266556083,2266556458,2266556700,2266556711,2266558381,2266558574,2266558719,2266558774,2266559057,2266559070,2266559151,2266559593,2266560188,2266561039,2266561359,2266561428,2266563390,2266563479,2266563869,2266564090,2266564429,2266565126,2266566272,2266566278,2266566852,2266567251,2266567538,2266567543,2266568019,2266568067,2266568243,2266568358,2266568566,2266570274,2266571278,2266571441,2266571522,2266571528,2266571658,2266571837,2266572995,2266573021,2266573052,2266573420,2266573903,2266575061,2266575096,2266575519,2266575645,2266576983,2266577336,2266577342,2266577352,2266577381,2266578648,2266579418,2266579529,2266581270,2266581681,2266583445,2266583478,2266583861,2266585148,2266585153,2266585493,2266585953,2266586242,2266586972,2266589877,2266590077,2266590810,2266591290,2266591971,2266592132,2266592313,2266593031,2266594093,2266594472,2266596511,2266596717,2266597141,2266597393,2266599062,2266599611,2266600811,2266601648,2266601651,2266601805,2266602155,2266602472,2266602774,2266603271,2266603685,2266604841,2266604937,2266604940,2266604964,2266604969,2266605239,2266606125,2266607235,2266607241,2266607259,2266607474,2266607479,2266607709,2266607900,2266607909,2266608378,2266608742,2266609158,2266609351,2266609395,2266610173,2266610616,2266611055,2266611661,2266611812,2266612164,2266612181,2266612272,2266612331,2266612465,2266612469,2266612795,2266612892,2266613316,2266613318,2266613376,2266613392,2266613400,2266613417,2266613422,2266613430,2266613459,2266613462,2266614010,2266614023,2266614154,2266614160,2266614205,2266614313,2266614517,2266614522,2266614720,2266614790,2266615416,2266615793,2266615812,2266616907,2266617565,2266618013,2266619435,2266619437,2266619595,2266620881,2266621191,2266621557,2266622275,2266622436,2266623104,2266623149,2266623617,2266625062,2266625101,2266625469,2266625706,2266626480,2266626488,2266626511,2266627509,2266627912,2266628160,2266628163,2266628481,2266628529,2266628534,2266628917,2266629914";
        List<Int64> _ids = new List<Int64>();
        public Cerberus()
        {
            InitializeComponent();
            List<String> ids = EFTIds.Split(',').ToList();
            
            foreach (var item in ids)
            {
                _ids.Add(Convert.ToInt64(item));
            }
        }

        public void RunAsConsole(string[] args)
        {
            OnStart(args);
            Console.WriteLine("Press any key to exit...");
            Console.ReadLine();
            OnStop();
        }

        protected override void OnStart(string[] args)
        {
            // Setup Variables
            DateTime ScanStartTxnTime = DateTime.MinValue;
            DateTime ScanEndTxnTime = DateTime.MaxValue;

            // Open Log
            TxLogInfo logInfo = new TxLogInfo();
            String path = @"D:\EisaDir\data\TxnLogBackup\ProdExamples\EisLog02112.DAT";

            // Get Txns
            //List<TxnIdInfo> txnIds = MTxnLogFile.GetTxnIdInfo().Where(t => t.TxnId == 298 || t.TxnId == 299).ToList();

            // Get Results
            List<TxnDetail> results = new List<TxnDetail>();

            using (MTxnLogFile TxnLog = new MTxnLogFile())
            {
                try
                {
                    if (!TxnLog.Open(path))
                    {
                        throw new ApplicationException("Unable to open file '" + path + "'");
                    }

                    // Get Log Info
                    logInfo.GetLogDetails(path);
                    // Get First and Last Serial Nos
                    UInt64 lastPosition = TxnLog.GetLastPosition();
                    UInt64 currentPosition = TxnLog.GetPosition(logInfo.firstSerialNo);
                    TxnDetail detail = TxnLog.GetTxnDetail(currentPosition);

                    //while (currentPosition <= lastPosition)
                    foreach (ulong serialNo in _ids)
                    {
                        if (currentPosition <= lastPosition)
                        {
                            // 1: Get Txn Details
                            currentPosition = TxnLog.GetPosition(serialNo);
                            detail = TxnLog.GetTxnDetail(currentPosition);

                            // 2: Check the Detail txnId to filter scan
                            if (detail.TxnId == 298 || detail.TxnId == 299)
                            {
                                // 3: Get the txn details
                                results.Add(TxnLog.GetTxnDetail(currentPosition));
                                // Log event
                            }
                        }
                    }

                    foreach (TxnDetail eftTxn in results)
                    {
                        // 4: Parse the Format String of details
                        String x = eftTxn.FmtStr;
                        Regex rex = new Regex("(?<=MerchantId:)[0-9]+");
                        String match = String.Empty;

                        EFTTerminalAudit eftta = new EFTTerminalAudit();
                        eftta.FirstVerified = DateTime.Now;
                        eftta.LastVerified = DateTime.Now;
                        eftta.Make = "Thismake";
                        eftta.MerchantId = Convert.ToInt32(rex.Match(match));
                        eftta.Model = "44";
                        eftta.OfficeNo = 1701;
                        eftta.StationNo = 1;
                        eftta.SWVersion = "asd1564";
                        eftta.TerminalId = "sdfgsdfg";

                        // 5: Add to the database
                        using (ISession session = FluentNHibernateHelper.OpenSession())
                        {
                            using (var txn = session.BeginTransaction())
                            {
                                session.Save(eftta);
                                txn.Commit();
                                var eft = session.Query<EFTTerminalAudit>().ToList();
                            }
                        }
                    }

                }
                catch (Exception)
                {

                    throw;
                }
            }

         }

        protected override void OnStop()
        {
        }
    }
}
